<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFramework>net6.0-windows10.0.17763.0</TargetFramework>
    <OutputType>Library</OutputType>
    <IsWebBootstrapper>false</IsWebBootstrapper>
    <PublishUrl>publish\</PublishUrl>
    <Install>true</Install>
    <InstallFrom>Disk</InstallFrom>
    <UpdateEnabled>false</UpdateEnabled>
    <UpdateMode>Foreground</UpdateMode>
    <UpdateInterval>7</UpdateInterval>
    <UpdateIntervalUnits>Days</UpdateIntervalUnits>
    <UpdatePeriodically>false</UpdatePeriodically>
    <UpdateRequired>false</UpdateRequired>
    <MapFileExtensions>true</MapFileExtensions>
    <ApplicationRevision>0</ApplicationRevision>
    <ApplicationVersion>1.0.0.%2a</ApplicationVersion>
    <UseApplicationTrust>false</UseApplicationTrust>
    <BootstrapperEnabled>true</BootstrapperEnabled>
    <GenerateAssemblyInfo>false</GenerateAssemblyInfo>
    <UseWPF>true</UseWPF>
    <RuntimeIdentifier>win10-x64</RuntimeIdentifier>
    <ImportWindowsDesktopTargets>true</ImportWindowsDesktopTargets>
    <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <PlatformTarget>x64</PlatformTarget>
    <OutputPath>..\..\Debug\app\</OutputPath>
    <DefineConstants>TRACE;DEBUG;INTEGRATE_Joker_PLUGIN;NHMWS4</DefineConstants>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <PlatformTarget>x64</PlatformTarget>
    <OutputPath>..\..\Release\app\</OutputPath>
    <DefineConstants>TRACE;INTEGRATE_Joker_PLUGIN;NHMWS4</DefineConstants>
    <UseVSHostingProcess>true</UseVSHostingProcess>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
    <NoWarn>1701;1702;CA1416</NoWarn>
  </PropertyGroup>
  <PropertyGroup Condition="$(DefineConstants.Contains('INTEGRATE_ALL_PLUGINS'))">
    <DefineConstants>INTEGRATE_NBMiner_PLUGIN;INTEGRATE_NanoMiner_PLUGIN;INTEGRATE_LolMiner_PLUGIN;$(DefineConstants)</DefineConstants>
  </PropertyGroup>
  <PropertyGroup>
    <StartupObject />
  </PropertyGroup>
  <ItemGroup>
    <PackageReference Include="log4net" Version="2.0.14" />
    <PackageReference Include="Newtonsoft.Json" Version="13.0.1" />
    <PackageReference Include="SharpCompress" Version="0.31.0" />
    <PackageReference Include="System.Memory" Version="4.5.4" />
    <PackageReference Include="WebSocketSharp.Standard" Version="1.0.3" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\Miners\LolMiner\MP.LolMiner.csproj" />
    <ProjectReference Include="..\Miners\MP.Joker\MP.Joker.csproj" />
    <ProjectReference Include="..\Miners\NanoMiner\MP.NanoMiner.csproj" />
    <ProjectReference Include="..\Miners\NBMiner\MP.NBMiner.csproj" />
    <ProjectReference Include="..\Miners\__DEV__BrokenMiner\MP.__DEV__BrokenMiner.csproj" />
    <ProjectReference Include="..\Miners\__DEV__ExamplePlugin\MP.__DEV__ExamplePlugin.csproj" />
    <ProjectReference Include="..\Miners\__DEV__FakePlugin\MP.__DEV__FakePlugin.csproj" />
    <ProjectReference Include="..\NHM.CommonWin32\NHM.CommonWin32.csproj" />
    <ProjectReference Include="..\NHM.CredentialValidators\NHM.CredentialValidators.csproj" />
    <ProjectReference Include="..\NHM.DeviceDetection\NHM.DeviceDetection.csproj" />
    <ProjectReference Include="..\NHM.DeviceMonitoring\NHM.DeviceMonitoring.csproj" />
    <ProjectReference Include="..\NHM.MinerPluginLoader\NHM.MinerPluginLoader.csproj" />
    <ProjectReference Include="..\NHM.MinerPluginToolkitV1\NHM.MinerPluginToolkitV1.csproj" />
    <ProjectReference Include="..\NHM.MinerPlugin\NHM.MinerPlugin.csproj" />
    <ProjectReference Include="..\NHM.MinersDownloader\NHM.MinersDownloader.csproj" />
    <ProjectReference Include="..\NHM.UUID\NHM.UUID.csproj" />
  </ItemGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <NoWarn>1701;1702;CA1416</NoWarn>
  </PropertyGroup>
  <Target Name="PostBuild" AfterTargets="PostBuildEvent">
    <Exec Command="REM copy translations. Always copy and replace file&#xD;&#xA;copy /Y &quot;$(ProjectDir)\translations.json&quot; &quot;$(SolutionDir)$(Configuration)\app\translations.json&quot;&#xD;&#xA;REM device detection test script&#xD;&#xA;copy /Y &quot;$(SolutionDir)\pre_compiled_libs\device_detection_test.bat&quot; &quot;$(SolutionDir)$(Configuration)\app\device_detection_test.bat&quot;&#xD;&#xA;REM script to reboot if NVIDIA CUDA is down&#xD;&#xA;copy /Y &quot;$(ProjectDir)\OnGPUsLost.bat&quot; &quot;$(SolutionDir)$(Configuration)\OnGPUsLost.bat&quot;&#xD;&#xA;&#xD;&#xA;REM copy device device_detection_x64 exe's, dll's, scripts. Copy only if files don't exist&#xD;&#xA;If NOT exist &quot;$(SolutionDir)$(Configuration)\app\device_detection.exe&quot; copy /Y &quot;$(SolutionDir)\pre_compiled_libs\device_detection_x64\device_detection.exe&quot; &quot;$(SolutionDir)$(Configuration)\app\device_detection.exe&quot;&#xD;&#xA;If NOT exist &quot;$(SolutionDir)$(Configuration)\app\device_detection.bat&quot; copy /Y &quot;$(SolutionDir)\pre_compiled_libs\device_detection_x64\device_detection.bat&quot; &quot;$(SolutionDir)$(Configuration)\app\device_detection.bat&quot;&#xD;&#xA;If NOT exist &quot;$(SolutionDir)$(Configuration)\app\device_detection_cpu.dll&quot; copy /Y &quot;$(SolutionDir)\pre_compiled_libs\device_detection_x64\device_detection_cpu.dll&quot; &quot;$(SolutionDir)$(Configuration)\app\device_detection_cpu.dll&quot;&#xD;&#xA;If NOT exist &quot;$(SolutionDir)$(Configuration)\app\device_detection_cuda_nvml.dll&quot; copy /Y &quot;$(SolutionDir)\pre_compiled_libs\device_detection_x64\device_detection_cuda_nvml.dll&quot; &quot;$(SolutionDir)$(Configuration)\app\device_detection_cuda_nvml.dll&quot;&#xD;&#xA;If NOT exist &quot;$(SolutionDir)$(Configuration)\app\device_detection_opencl_adl.dll&quot; copy /Y &quot;$(SolutionDir)\pre_compiled_libs\device_detection_x64\device_detection_opencl_adl.dll&quot; &quot;$(SolutionDir)$(Configuration)\app\device_detection_opencl_adl.dll&quot;&#xD;&#xA;If NOT exist &quot;$(SolutionDir)$(Configuration)\app\device_detection_igcl.dll&quot; copy /Y &quot;$(SolutionDir)\pre_compiled_libs\device_detection_x64\device_detection_igcl.dll&quot; &quot;$(SolutionDir)$(Configuration)\app\device_detection_igcl.dll&quot;&#xD;&#xA;&#xD;&#xA;REM commons dll's for downloaded miners. Copy only if files don't exist. Remove this after plugin system fully replaces integrated miners&#xD;&#xA;REM create directory&#xD;&#xA;If NOT exist &quot;$(SolutionDir)$(Configuration)\app\common\&quot; mkdir &quot;$(SolutionDir)$(Configuration)\app\common\&quot;&#xD;&#xA;REM copy over dll's&#xD;&#xA;If NOT exist &quot;$(SolutionDir)$(Configuration)\app\common\cudart32_80.dll&quot; copy /Y &quot;$(SolutionDir)\pre_compiled_libs\common\cudart32_80.dll&quot; &quot;$(SolutionDir)$(Configuration)\app\common\cudart32_80.dll&quot;&#xD;&#xA;If NOT exist &quot;$(SolutionDir)$(Configuration)\app\common\cudart64_80.dll&quot; copy /Y &quot;$(SolutionDir)\pre_compiled_libs\common\cudart64_80.dll&quot; &quot;$(SolutionDir)$(Configuration)\app\common\cudart64_80.dll&quot;&#xD;&#xA;If NOT exist &quot;$(SolutionDir)$(Configuration)\app\common\cudart64_91.dll&quot; copy /Y &quot;$(SolutionDir)\pre_compiled_libs\common\cudart64_91.dll&quot; &quot;$(SolutionDir)$(Configuration)\app\common\cudart64_91.dll&quot;&#xD;&#xA;If NOT exist &quot;$(SolutionDir)$(Configuration)\app\common\libcurl.dll&quot; copy /Y &quot;$(SolutionDir)\pre_compiled_libs\common\libcurl.dll&quot; &quot;$(SolutionDir)$(Configuration)\app\common\libcurl.dll&quot;&#xD;&#xA;If NOT exist &quot;$(SolutionDir)$(Configuration)\app\common\msvcp120.dll&quot; copy /Y &quot;$(SolutionDir)\pre_compiled_libs\common\msvcp120.dll&quot; &quot;$(SolutionDir)$(Configuration)\app\common\msvcp120.dll&quot;&#xD;&#xA;If NOT exist &quot;$(SolutionDir)$(Configuration)\app\common\msvcp140.dll&quot; copy /Y &quot;$(SolutionDir)\pre_compiled_libs\common\msvcp140.dll&quot; &quot;$(SolutionDir)$(Configuration)\app\common\msvcp140.dll&quot;&#xD;&#xA;If NOT exist &quot;$(SolutionDir)$(Configuration)\app\common\msvcr110.dll&quot; copy /Y &quot;$(SolutionDir)\pre_compiled_libs\common\msvcr110.dll&quot; &quot;$(SolutionDir)$(Configuration)\app\common\msvcr110.dll&quot;&#xD;&#xA;If NOT exist &quot;$(SolutionDir)$(Configuration)\app\common\msvcr120.dll&quot; copy /Y &quot;$(SolutionDir)\pre_compiled_libs\common\msvcr120.dll&quot; &quot;$(SolutionDir)$(Configuration)\app\common\msvcr120.dll&quot;&#xD;&#xA;If NOT exist &quot;$(SolutionDir)$(Configuration)\app\common\vcruntime140.dll&quot; copy /Y &quot;$(SolutionDir)\pre_compiled_libs\common\vcruntime140.dll&quot; &quot;$(SolutionDir)$(Configuration)\app\common\vcruntime140.dll&quot;&#xD;&#xA;&#xD;&#xA;If NOT exist &quot;$(SolutionDir)$(Configuration)\app\device_monitoring_amd.dll&quot; copy /Y &quot;$(SolutionDir)\pre_compiled_libs\device_monitoring_x64\device_monitoring_amd.dll&quot; &quot;$(SolutionDir)$(Configuration)\app\device_monitoring_amd.dll&quot;&#xD;&#xA;If NOT exist &quot;$(SolutionDir)$(Configuration)\app\device_monitoring_nvidia.dll&quot; copy /Y &quot;$(SolutionDir)\pre_compiled_libs\device_monitoring_x64\device_monitoring_nvidia.dll&quot; &quot;$(SolutionDir)$(Configuration)\app\device_monitoring_nvidia.dll&quot;&#xD;&#xA;If NOT exist &quot;$(SolutionDir)$(Configuration)\app\device_monitoring_intel.dll&quot; copy /Y &quot;$(SolutionDir)\pre_compiled_libs\device_monitoring_x64\device_monitoring_intel.dll&quot; &quot;$(SolutionDir)$(Configuration)\app\device_monitoring_intel.dll&quot;&#xD;&#xA;If NOT exist &quot;$(SolutionDir)$(Configuration)\app\pid_controller.dll&quot; copy /Y &quot;$(SolutionDir)\pre_compiled_libs\device_monitoring_x64\pid_controller.dll&quot; &quot;$(SolutionDir)$(Configuration)\app\pid_controller.dll&quot;&#xD;&#xA;If NOT exist &quot;$(SolutionDir)$(Configuration)\app\GPUprofiles.json&quot; copy /Y &quot;$(SolutionDir)\Resources\GPUprofiles.json&quot; &quot;$(SolutionDir)$(Configuration)\app\GPUprofiles.json&quot;&#xD;&#xA;&#xD;&#xA;If NOT exist &quot;$(SolutionDir)installer\version_manager\&quot; mkdir &quot;$(SolutionDir)installer\version_manager\&quot;&#xD;&#xA;If NOT exist &quot;$(SolutionDir)installer\version_manager\AssemblyInfoVersionManager.exe&quot; copy /Y &quot;$(SolutionDir)src\Tools\AssemblyInfoVersionManager\bin\$(Configuration)\net6.0\AssemblyInfoVersionManager.exe&quot; &quot;$(SolutionDir)installer\version_manager\AssemblyInfoVersionManager.exe&quot;&#xD;&#xA;If NOT exist &quot;$(SolutionDir)installer\version_manager\AssemblyInfoVersionManager.dll&quot; copy /Y &quot;$(SolutionDir)src\Tools\AssemblyInfoVersionManager\bin\$(Configuration)\net6.0\AssemblyInfoVersionManager.dll&quot; &quot;$(SolutionDir)installer\version_manager\AssemblyInfoVersionManager.dll&quot;&#xD;&#xA;If NOT exist &quot;$(SolutionDir)installer\version_manager\AssemblyInfoVersionManager.runtimeconfig.json&quot; copy /Y &quot;$(SolutionDir)src\Tools\AssemblyInfoVersionManager\bin\$(Configuration)\net6.0\AssemblyInfoVersionManager.runtimeconfig.json&quot; &quot;$(SolutionDir)installer\version_manager\AssemblyInfoVersionManager.runtimeconfig.json&quot;&#xD;&#xA;If NOT exist &quot;$(SolutionDir)installer\version_manager\AssemblyInfoVersionManager.deps.json&quot; copy /Y &quot;$(SolutionDir)src\Tools\AssemblyInfoVersionManager\bin\$(Configuration)\net6.0\AssemblyInfoVersionManager.deps.json&quot; &quot;$(SolutionDir)installer\version_manager\AssemblyInfoVersionManager.deps.json&quot;&#xD;&#xA;" />
  </Target>
</Project>